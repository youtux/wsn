# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.33
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _TOSSIM
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    if method := class_type.__swig_setmethods__.get(name, None):
        return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError(f"You cannot add attributes to {self}")

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    if method := class_type.__swig_getmethods__.get(name, None):
        return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try:
        strthis = f"proxy of {self.this.__repr__()}"
    except: strthis = ""
    return f"<{self.__class__.__module__}.{self.__class__.__name__}; {strthis} >"

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class MAC(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MAC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MAC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _TOSSIM.new_MAC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TOSSIM.delete_MAC
    __del__ = lambda self : None;
    def initHigh(self):
        return _TOSSIM.MAC_initHigh(*self)
    def initLow(self):
        return _TOSSIM.MAC_initLow(*self)
    def high(self):
        return _TOSSIM.MAC_high(*self)
    def low(self):
        return _TOSSIM.MAC_low(*self)
    def symbolsPerSec(self):
        return _TOSSIM.MAC_symbolsPerSec(*self)
    def bitsPerSymbol(self):
        return _TOSSIM.MAC_bitsPerSymbol(*self)
    def preambleLength(self):
        return _TOSSIM.MAC_preambleLength(*self)
    def exponentBase(self):
        return _TOSSIM.MAC_exponentBase(*self)
    def maxIterations(self):
        return _TOSSIM.MAC_maxIterations(*self)
    def minFreeSamples(self):
        return _TOSSIM.MAC_minFreeSamples(*self)
    def rxtxDelay(self):
        return _TOSSIM.MAC_rxtxDelay(*self)
    def ackTime(self):
        return _TOSSIM.MAC_ackTime(*self)
    def setInitHigh(self):
        return _TOSSIM.MAC_setInitHigh(*self)
    def setInitLow(self):
        return _TOSSIM.MAC_setInitLow(*self)
    def setHigh(self):
        return _TOSSIM.MAC_setHigh(*self)
    def setLow(self):
        return _TOSSIM.MAC_setLow(*self)
    def setSymbolsPerSec(self):
        return _TOSSIM.MAC_setSymbolsPerSec(*self)
    def setBitsBerSymbol(self):
        return _TOSSIM.MAC_setBitsBerSymbol(*self)
    def setPreambleLength(self):
        return _TOSSIM.MAC_setPreambleLength(*self)
    def setExponentBase(self):
        return _TOSSIM.MAC_setExponentBase(*self)
    def setMaxIterations(self):
        return _TOSSIM.MAC_setMaxIterations(*self)
    def setMinFreeSamples(self):
        return _TOSSIM.MAC_setMinFreeSamples(*self)
    def setRxtxDelay(self):
        return _TOSSIM.MAC_setRxtxDelay(*self)
    def setAckTime(self):
        return _TOSSIM.MAC_setAckTime(*self)
MAC_swigregister = _TOSSIM.MAC_swigregister
MAC_swigregister(MAC)

class Radio(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Radio, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Radio, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _TOSSIM.new_Radio(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TOSSIM.delete_Radio
    __del__ = lambda self : None;
    def add(self):
        return _TOSSIM.Radio_add(*self)
    def gain(self):
        return _TOSSIM.Radio_gain(*self)
    def connected(self):
        return _TOSSIM.Radio_connected(*self)
    def remove(self):
        return _TOSSIM.Radio_remove(*self)
    def setNoise(self):
        return _TOSSIM.Radio_setNoise(*self)
    def setSensitivity(self):
        return _TOSSIM.Radio_setSensitivity(*self)
Radio_swigregister = _TOSSIM.Radio_swigregister
Radio_swigregister(Radio)

class Packet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Packet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Packet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _TOSSIM.new_Packet(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TOSSIM.delete_Packet
    __del__ = lambda self : None;
    def setSource(self):
        return _TOSSIM.Packet_setSource(*self)
    def source(self):
        return _TOSSIM.Packet_source(*self)
    def setDestination(self):
        return _TOSSIM.Packet_setDestination(*self)
    def destination(self):
        return _TOSSIM.Packet_destination(*self)
    def setLength(self):
        return _TOSSIM.Packet_setLength(*self)
    def length(self):
        return _TOSSIM.Packet_length(*self)
    def setType(self):
        return _TOSSIM.Packet_setType(*self)
    def type(self):
        return _TOSSIM.Packet_type(*self)
    def data(self):
        return _TOSSIM.Packet_data(*self)
    def setData(self):
        return _TOSSIM.Packet_setData(*self)
    def maxLength(self):
        return _TOSSIM.Packet_maxLength(*self)
    def setStrength(self):
        return _TOSSIM.Packet_setStrength(*self)
    def deliver(self):
        return _TOSSIM.Packet_deliver(*self)
    def deliverNow(self):
        return _TOSSIM.Packet_deliverNow(*self)
Packet_swigregister = _TOSSIM.Packet_swigregister
Packet_swigregister(Packet)

class variable_string_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, variable_string_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, variable_string_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _TOSSIM.variable_string_t_type_set
    __swig_getmethods__["type"] = _TOSSIM.variable_string_t_type_get
    if _newclass:type = _swig_property(_TOSSIM.variable_string_t_type_get, _TOSSIM.variable_string_t_type_set)
    __swig_setmethods__["ptr"] = _TOSSIM.variable_string_t_ptr_set
    __swig_getmethods__["ptr"] = _TOSSIM.variable_string_t_ptr_get
    if _newclass:ptr = _swig_property(_TOSSIM.variable_string_t_ptr_get, _TOSSIM.variable_string_t_ptr_set)
    __swig_setmethods__["len"] = _TOSSIM.variable_string_t_len_set
    __swig_getmethods__["len"] = _TOSSIM.variable_string_t_len_get
    if _newclass:len = _swig_property(_TOSSIM.variable_string_t_len_get, _TOSSIM.variable_string_t_len_set)
    __swig_setmethods__["isArray"] = _TOSSIM.variable_string_t_isArray_set
    __swig_getmethods__["isArray"] = _TOSSIM.variable_string_t_isArray_get
    if _newclass:isArray = _swig_property(_TOSSIM.variable_string_t_isArray_get, _TOSSIM.variable_string_t_isArray_set)
    def __init__(self, *args): 
        this = _TOSSIM.new_variable_string_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TOSSIM.delete_variable_string_t
    __del__ = lambda self : None;
variable_string_t_swigregister = _TOSSIM.variable_string_t_swigregister
variable_string_t_swigregister(variable_string_t)

class nesc_app_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nesc_app_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nesc_app_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["numVariables"] = _TOSSIM.nesc_app_t_numVariables_set
    __swig_getmethods__["numVariables"] = _TOSSIM.nesc_app_t_numVariables_get
    if _newclass:numVariables = _swig_property(_TOSSIM.nesc_app_t_numVariables_get, _TOSSIM.nesc_app_t_numVariables_set)
    __swig_setmethods__["variableNames"] = _TOSSIM.nesc_app_t_variableNames_set
    __swig_getmethods__["variableNames"] = _TOSSIM.nesc_app_t_variableNames_get
    if _newclass:variableNames = _swig_property(_TOSSIM.nesc_app_t_variableNames_get, _TOSSIM.nesc_app_t_variableNames_set)
    __swig_setmethods__["variableTypes"] = _TOSSIM.nesc_app_t_variableTypes_set
    __swig_getmethods__["variableTypes"] = _TOSSIM.nesc_app_t_variableTypes_get
    if _newclass:variableTypes = _swig_property(_TOSSIM.nesc_app_t_variableTypes_get, _TOSSIM.nesc_app_t_variableTypes_set)
    __swig_setmethods__["variableArray"] = _TOSSIM.nesc_app_t_variableArray_set
    __swig_getmethods__["variableArray"] = _TOSSIM.nesc_app_t_variableArray_get
    if _newclass:variableArray = _swig_property(_TOSSIM.nesc_app_t_variableArray_get, _TOSSIM.nesc_app_t_variableArray_set)
    def __init__(self, *args): 
        this = _TOSSIM.new_nesc_app_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TOSSIM.delete_nesc_app_t
    __del__ = lambda self : None;
nesc_app_t_swigregister = _TOSSIM.nesc_app_t_swigregister
nesc_app_t_swigregister(nesc_app_t)

class Variable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Variable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Variable, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _TOSSIM.new_Variable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TOSSIM.delete_Variable
    __del__ = lambda self : None;
    def getData(self):
        return _TOSSIM.Variable_getData(*self)
Variable_swigregister = _TOSSIM.Variable_swigregister
Variable_swigregister(Variable)

class Mote(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mote, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mote, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _TOSSIM.new_Mote(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TOSSIM.delete_Mote
    __del__ = lambda self : None;
    def id(self):
        return _TOSSIM.Mote_id(*self)
    def euid(self):
        return _TOSSIM.Mote_euid(*self)
    def setEuid(self):
        return _TOSSIM.Mote_setEuid(*self)
    def bootTime(self):
        return _TOSSIM.Mote_bootTime(*self)
    def bootAtTime(self):
        return _TOSSIM.Mote_bootAtTime(*self)
    def isOn(self):
        return _TOSSIM.Mote_isOn(*self)
    def turnOff(self):
        return _TOSSIM.Mote_turnOff(*self)
    def turnOn(self):
        return _TOSSIM.Mote_turnOn(*self)
    def getVariable(self):
        return _TOSSIM.Mote_getVariable(*self)
    def addNoiseTraceReading(self):
        return _TOSSIM.Mote_addNoiseTraceReading(*self)
    def createNoiseModel(self):
        return _TOSSIM.Mote_createNoiseModel(*self)
    def generateNoise(self):
        return _TOSSIM.Mote_generateNoise(*self)
Mote_swigregister = _TOSSIM.Mote_swigregister
Mote_swigregister(Mote)

class Tossim(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tossim, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Tossim, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _TOSSIM.new_Tossim(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TOSSIM.delete_Tossim
    __del__ = lambda self : None;
    def init(self):
        return _TOSSIM.Tossim_init(*self)
    def time(self):
        return _TOSSIM.Tossim_time(*self)
    def ticksPerSecond(self):
        return _TOSSIM.Tossim_ticksPerSecond(*self)
    def setTime(self):
        return _TOSSIM.Tossim_setTime(*self)
    def timeStr(self):
        return _TOSSIM.Tossim_timeStr(*self)
    def currentNode(self):
        return _TOSSIM.Tossim_currentNode(*self)
    def getNode(self):
        return _TOSSIM.Tossim_getNode(*self)
    def setCurrentNode(self):
        return _TOSSIM.Tossim_setCurrentNode(*self)
    def addChannel(self):
        return _TOSSIM.Tossim_addChannel(*self)
    def removeChannel(self):
        return _TOSSIM.Tossim_removeChannel(*self)
    def randomSeed(self):
        return _TOSSIM.Tossim_randomSeed(*self)
    def runNextEvent(self):
        return _TOSSIM.Tossim_runNextEvent(*self)
    def mac(self):
        return _TOSSIM.Tossim_mac(*self)
    def radio(self):
        return _TOSSIM.Tossim_radio(*self)
    def newPacket(self):
        return _TOSSIM.Tossim_newPacket(*self)
Tossim_swigregister = _TOSSIM.Tossim_swigregister
Tossim_swigregister(Tossim)



